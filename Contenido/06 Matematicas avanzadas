Matemáticas avanzadas
(Éste capítulo es totalmente opcionale. Asume un grado moderado de conocimiento matemático. Si no estás interesado, puedes continuar directamente al capítulo sobre control de flujo sin ningún problema. Sin embargo, un repaso rápido sobre la sección de números aleatorios podría ser de utilidad.)

No hay tantos métodos para números como los hay para cadenas de caracteres (aún así, no los tengo todos en la memoria). Aquí veremos al resto de los métodos aritméticos, un generador de números aleatorios y el objeto Math con sus métodos trigonométricos y trascendentales.

Más aritmética
Los otros dos métodos aritméticos son ** (potenciación) y % (módulo). Así que si quieres escribir «cinco al cuadrado» en Ruby, lo escribirías como 5 ** 2. También puedes usar números reales como exponente, si quieres la raíz cuadrada de 5, puedes escribirlo como 5 ** 0.5. El método modulo te da el remanente de una división. Así que, por ejemplo, si divido 7 entre 3, obtengo 2 con un remanente de 1.

Veamos como funcionan en un programa:

puts 5 ** 2
puts 5 ** 0.5
puts 7 / 3
puts 7 % 3
puts 365 % 7

25
2.23606797749979
2
1
1

De la última línea aprendemos que un año (no bisiesto) tiene cierto número de semanas más un día. Así que si tu cumpleaños es (o fue) el martes éste año, será en miércoles el siguiente. También puedes usar números reales con el método módulo. Básicamente funciona de la única forma sensible que podría... pero te dejaré jugar con eso.

Hay un último método que mencionar antes de ver la generación de números aleatorios: abs. Sólo devuelve el valor absoluto de un número:

puts (5 - 2).abs
puts (2 - 5).abs

3
3

Números aleatorios
Ruby incluye un bonito generador de números aleatorios. El método para obtener un número elegido al azar es rand. Si llamas a rand sólo así, obtendrás un número real igual o mayor que 0 y menor que 1.0. Si le das a rand un entero (5, por ejemplo), te devolverá un entero mayor o igual que 0 y menor que 5 (cinco posibles números del 0 al 4).

Vemos a rand en acción.

puts rand
puts rand
puts rand
puts rand(100)
puts rand(100)
puts rand(100)
puts rand(1)
puts rand(1)
puts rand(1)
puts rand(99999999999999999999999999999999999999999999999999999999999)
puts 'El hombre del clima dijo que hay '+rand(101).to_s+'% de probabilidad'
puts 'de lluvia, pero nunca debes de confiar en el hombre del clima.'

0.866769322351658
0.155609260113273
0.208355946789083
61
46
92
0
0
0
22982477508131860231954108773887523861600693989518495699862
El hombre del clima dijo que hay 47% d probabilidad
de lluvia, pero nunca debes de confiar en el hombre del clima.

Nota que he usado rand(101) para obtener números entre 0 y 100, y que rand(1) siempre regresa 0. No comprender el rango de posibles valores devueltos es el error más grande que he visto a otras personas realizar con rand; aun programadores profesionales; aun en productos terminados que puedes comprar en una tienda. Una vez tuve un reproductor de CDs que al ser colocado en modo de «reproducción aleatoria», reproducía todas las pistas excepto la última... (Me pregunto, ¿qué hubiera pasado su hubiera colocado con un CD con sólo una pista en él?)

Algunas veces podrías querer que rand devuelva los mismos números aleatorios en la misma secuencia en dos diferentes ejecuciones de tu programa. (Por ejemplo, una vez utilice un generador de números aleatorios para crear un mundo generado automáticamente para un juego de computadora. Si encontraba un mundo que realmente me gustara, tal vez me gustaría jugar en el de nuevo, o enviarlo a un amigo.) Para lograr esto, necesitas configurar un valor semilla, lo cual puedes hacer con srand. Algo así:

srand 1776
puts rand(100)
puts rand(100)
puts rand(100)
puts rand(100)
puts rand(100)
puts ''
srand 1776
puts rand(100)
puts rand(100)
puts rand(100)
puts rand(100)
puts rand(100)

24
35
36
58
70

24
35
36
58
70

Hará lo mismo cada vez que utilices el mismo número como semilla. Si quieres volver a obtener diferentes números otra vez (como si nunca hubieras usado srand), entonces llama srand 0. Esto le da como semilla un número realmente raro, usando (entre otras cosas) la hora actual de tu computadora, con precisión de milisegundos.


El objeto Math
Por último, veamos el objeto Math. También podríamos saltar directamente dentro de él:

puts Math::PI
puts Math::E
puts Math.cos(Math::PI / 3)
puts Math.tan(Math::PI / 4)
puts Math.log(Math::E ** 2)
puts (1 + Math.sqrt(5)) / 2

3.14159265358979
2.71828182845905
0.5
1.0
2.0
1.61803398874989

Lo primero que tal vez notaste fue la notación ::. Explicar el operador de alcance (que es lo eso es) está realmente más allá del, eh... del alcance de éste tutorial. No es broma. Lo juro. Es suficiente decir que puedes usar Math::Pi justo como lo esperarías.

Como puedes ver, Math tiene todas las cosas que podrías esperar de una calculadora científica decente. Y como siempre, los números reales están realmente cerca de ser las respuestas correctas.

Así que ahora, ¡fluyamos!
