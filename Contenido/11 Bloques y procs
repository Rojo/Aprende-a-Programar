11. Bloques y procs
Ésta es sin duda una de las características más interesantes de Ruby. Algunos otros lenguajes tienen ésta propiedad, aunque pueden llamarla de otra forma (como clausuras[27]), pero lamentablemente, la mayoría de los lenguajes populares no la tienen.

¿Qué es ésta cosa nueva tan interesante? Es la habilidad de tomar un bloque de código (código entre do y end), envolverlo en un objeto (llamado proc), guardarlo en una variable o pasarlo a un método, y ejecutar el código en el bloque cuando lo desees (y más de una vez si así lo deseas). Por si mismo, es más como un método, excepto que no está ligado a ningún objeto (es un objeto), y puedes almacenarlo o manejarlo como harías con cualquier otro objeto. Creo que es hora de un ejemplo:

brindis = Proc.new do
  puts '¡Salud!'
end

brindis.call
brindis.call
brindis.call

¡Salud!
¡Salud!
¡Salud!

Así, creé un proc (creo que se supone es una abreviación para «procedimiento», pero aún más importante, rima con block[28]) que contiene el bloque de código, entonces llamé el proc tres veces. Como puedes ver, es muy parecido a un método.

De hecho, se parece más a un método de lo que te he mostrado, porque los bloques pueden recibir parámetros.

teGusta = Proc.new do | algoBueno |
  puts '¡Realmente me *gusta* ' + algoBueno + '!'
end

teGusta.call 'el chocolate'
teGusta.call 'Ruby'

¡Realmente me *gusta* el chocolate!
¡Realmente me *gusta* Ruby!

Bien, ahora vemos lo que son los bloques y procs, y como podemos usarlos, pero ¿cuál es el punto? Bueno, es porque hay algunas cosas que simplemente no puedes hacer con métodos. Particularmente, no puedes pasar métodos a otros métodos (pero puedes pasar procs a métodos), y los métodos no pueden devolver otros métodos (pero sí pueden devolver procs). Esto es debido a que los procs son objetos y los métodos no.

(Por cierto, ¿algo de esto te parece familiar? Sí, has visto bloques antes… cuando aprendiste sobre iteradores, pero hablemos sobre eso un poco más adelante.)

Métodos que reciben procs
Cuando pasamos un proc a un método, podemos controlar como y cuantas veces se llama al proc. Por ejemplo, digamos que hay algo que queremos hacer antes o después de que algún código sea ejecutado:

def algoImportante algunProc
  puts '¡Todos DETÉNGANSE! Tengo que hacer algo...'
  algunProc.call
  puts 'Muy bien todos, he terminado. Continúen con lo que estaban haciendo.'
end

diHola = Proc.new do
  puts 'hola'
end

diAdios = Proc.new do
  puts 'adiós'
end

algoImportante diHola
algoImportante diAdios

¡Todos DETÉNGANSE! Tengo que hacer algo...
hola
Muy bien todos, he terminado. Continúen con lo que estaban haciendo.
¡Todos DETÉNGANSE! Tengo que hacer algo...
adiós
Muy bien todos, he terminado. Continúen con lo que estaban haciendo.

Tal vez eso no parezca especialmente impresionante… ¡pero lo es! :-) Es demasiado común en el mundo de la programación el tener requerimientos estrictos acerca de qué y cuándo debe ser hecho algo. Si guardas un archivo, por ejemplo, tienes que abrir el archivo, escribir la información que quieres que tenga y entonces cerrar el archivo. Si olvidas cerrar el archivo Cosas Malas™ pueden pasar. Pero cada vez que quieres guardar o cargar un archivo, tienes que hacer las mismas cosas: abrir el archivo, hacer lo que realmente quieres hacer y entonces cerrar el archivo. Es tedioso y fácil de olvidar. En Ruby, salvar (o cargar) archivos funciona de forma similar al código de arriba, así que no te tienes que preocupar acerca de nada excepto por lo que quieres guardar (o cargar). (En el siguiente capítulo te mostraré donde puedes encontrar como hacer cosas como guardar o cargar archivos.)

También puedes escribir métodos que determinarán cuántas veces llamar a un proc o aún si acaso deben llamarlo. Aquí hay un método que llamará al proc que recibe cerca de la mitad del tiempo y otro método que lo llamará dos veces:

def talVez algunProc
  if rand(2) == 0
    algunProc.call
  end
end

def dosVeces algunProc
  algunProc.call
  algunProc.call
end

guino = Proc.new do
  puts '<guiño>'
end

mirada = Proc.new do
  puts '<mirada>'
end

talVez guino
talVez mirada
dosVeces guino
dosVeces mirada

<mirada>
<guiño>
<guiño>
<mirada>
<mirada>

Estos son algunos de los usos más comunes de los procs que nos permiten hacer cosas que no podríamos haber hecho usando sólo métodos. Claro, podrías escribir un método para hacer un guiño dos veces, ¡pero no podrías escribir uno para hacer algo dos veces!

Antes de seguir, veamos un último ejemplo. Hasta ahora los procs que hemos pasado han sido bastante similares unos de otros. Ésta vez serán bastante diferentes, así podrás ver como el método depende de los métodos que se le pasan. Nuestro método recibirá algún objeto y un proc, y llamará al proc sobre ese objeto. Si el proc retorna false, terminamos; de otra forma, llamamos a proc con el objeto retornado. Continuaremos haciendo esto hasta que el proc retorne false (lo cual será mejor que haga eventualmente, o el programa podría fallar). El programa retornará el último valor no falso retornado por el proc.

def mientrasNoSeaFalso primeraEntrada, algunProc
  entrada = primeraEntrada
  salida  = primeraEntrada
  while salida
    entrada = salida
    salida  = algunProc.call entrada
  end
  entrada
end

construirArregloDeCuadrados = Proc.new do | arreglo |
  ultimoNumero = arreglo.last
 
  if ultimoNumero <= 0
    false
  else
    # Remueve el último numero...
    arreglo.pop
    # ...y reemplazalo con su cuadrado...
    arreglo.push ultimoNumero * ultimoNumero
    # ...seguido por el siguiente número más pequeño.
    arreglo.push ultimoNumero - 1
  end
end

siempreFalso = Proc.new do | soloIgnorame |
    false
end

puts mientrasNoSeaFalso([5], construirArregloDeCuadrados).inspect
puts mientrasNoSeaFalso('Estoy escribiendo esto a las 3:00 am; ¡alguien que me de un golpe!', siempreFalso)

[25, 16, 9, 4, 1, 0]
Estoy escribiendo esto a las 3:00 am; ¡alguien que me de un golpe!

Está bien, ese fue un ejemplo bastante raro, lo admito. Pero muestra que tan diferente actúa nuestro método con diferentes procs.

El método inspect es muy parecido a to_s, excepto que la cadena que retorna trata de mostrarte el código en Ruby para construir el objeto que recibe. Aquí muestra el arreglo completo retornado por nuestra primera llamada a mientrasNoSeaFalso. También, te puedes dar cuenta que nunca obtuvimos el cuadrado de ese 0 al final del arreglo, pero como el cuadrado de 0 es aún 0, no tuvimos que. Y como siempreFalso fue, tu sabes, siempre false, mientrasNoSeaFalso no hizo en realidad nada la segunda vez que lo llamamos; sólo retornó lo que le pasamos.

Métodos que devuelven procs
Otra de las cosas bonitas que puedes hacer con procs es crearlos dentro de métodos y retornarlos. Esto permite todo tipo de locas prácticas de programación (cosas con nombres impresionantes, como evaluación perezosa, estructuras de datos infinitas, y currificación), pero el hecho es que casi nunca lo utilizamos en la práctica, ni puedo recordar haber visto a alguien utilizarlo en su código. Creo que es el tipo de cosas que no tienes que terminar haciendo en Ruby, o tal vez Ruby simplemente alienta a encontrar otras soluciones; no lo sé. En mi caso, sólo hablaré de esto brevemente,

En éste ejemplo, componer toma dos procs y retorna un nuevo proc que, cuando es llamado, llama al primer proc y pasa el resultado al segundo proc.

def componer proc1, proc2
  Proc.new do | x |
    proc2.call(proc1.call(x))
  end
end

alCuadrado = Proc.new do | x |
  x * x
end

alDoble = Proc.new do | x |
  x + x
end

alDobleYalCuadrado = componer alDoble, alCuadrado
alCuadradoYalDoble = componer alCuadrado, alDoble
puts alDobleYalCuadrado.call(5)
puts alCuadradoYalDoble.call(5)

100
50

Observa que la llamada a proc1 tuvo que ser dentro de paréntesis al llamar a proc2, para que proc1 fuera llamado primero.

Pasando bloques (no procs) a métodos
Bien, esto ha sido algo más o menos interesante desde un punto de vista académico, pero es algo poco práctico para usar. Mucho del problema consiste en que hay tres pasos por los que tienes pasar (definir el método, hacer el proc, y llamar el método con el proc), cuando se tiene la sensación de que sólo debería haber dos (definir el método y pasar el bloque dentro del método sin tener que usar un proc para nada), ya que la mayor parte del tiempo no querrás usar el bloque/proc después de que lo pases al método. Bueno, podrías no saberlo, ¡pero Ruby tiene todo pensado por nosotros! De hecho, ya lo has estado haciendo cada vez que usas iteradores.

Primero te mostraré un ejemplo y luego hablaremos sobre ello.

class Array
  def cadaPar(&eraUnBloque_ahoraUnProc)
    # Comenzamos con «true» porque los arreglos comienzan con 0,
    # que es par.
    esPar = true
    self.each do | objeto |
      if esPar
         eraUnBloque_ahoraUnProc.call objeto
      end
      esPar = (not esPar) # Cambiamos de par a impar, o de impar a par.
    end
  end
end

['manzana', 'manzana podrida', 'cereza', 'durian'].cadaPar do | fruta |
  puts '¡Qué rico! Amo el pay de ' + fruta + '. ¿Tú no?'
end

# Recuerda, estamos obteniendo los elementos pares del arreglo, los que
# resultan ser números impares, sólo porque me gustan problemas así.
[1, 2, 3, 4, 5].cadaPar do | bolaImpar |
  puts '¡' + bolaImpar.to_s + ' NO es un número par!'
end

¡Qué rico! Amo el pay de manzana. ¿Tú no?
¡Qué rico! Amo el pay de cereza. ¿Tú no?
¡1 NO es un número par!
¡3 NO es un número par!
¡5 NO es un número par!

Entonces, para pasar un bloque a cadaPar, todo lo que tuvimos que hacer fue meter el bloque después del método. Puedes pasar un bloque a cualquier método, aunque muchos métodos simplemente ignorarán el bloque. Para hacer que tu método no ignore el bloque, sino que lo tome y lo transforme en un proc, pon el nombre del proc al final de la lista de argumentos del método, precedido por un et (&). Ésta parte tiene su truco, pero no es tan difícil, y sólo tienes que hacer eso una vez (cuando defines el método). Después, puedes usar el método una y otra vez, justo como los métodos pre-construidos que aceptan bloques, como each y times. (¿Recuerdas 5.times do...?)

Si estás confundido, sólo recuerda lo que cadaPar se supone que hace: llamar el bloque que le fue pasado sobre cada tercer elemento alternado del arreglo. Una vez que lo has escrito y funciona, no tienes que pensar acerca de lo que está pasando por debajo («¿qué bloque es llamado cuándo?»); de hecho, eso es exactamente el por qué escribimos métodos como éste: para nunca tener que volver a pensar en cómo funcionan. Sólo los usamos.

Recuerdo que una vez quise ser capaz de tomar la cantidad de tiempo que estaban tomando las diferentes secciones de un programa. (A esto también se le conoce como análisis de rendimiento del código o perfilar el código.) Así que escribí un método que toma el tiempo antes de ejecutar el código, lo ejecuta, toma el tiempo de nuevo al final y encuentra la diferencia. No puedo encontrar el código ahora mismo, pero lo no necesito; seguramente fue algo como esto:

def perfilar descripcionDelBloque, &bloque
  tiempoInicial = Time.now
  bloque.call
  duracion = Time.now - tiempoInicial
  puts descripcionDelBloque + ': ' + duracion.to_s + ' segundos.'
end

perfilar 'Doblar el valor 25000 veces' do
  numero = 1
  25000.times do
    numero = numero + numero
  end
  # Total de dígitos en éste ENORME número.
  puts numero.to_s.length.to_s + ' dígitos'
end

perfilar 'Contar hasta un millón' do
  numero = 0
  1000000.times do
    numero = numero + 1
  end
end

752 dígitos
Doblar el valor 25000 veces: 0.246768 segundos
Contar hasta un millón: 0.90245 segundos


¡Qué sencillo! ¡Qué elegante! Con ese pequeño método, ahora puedo con facilidad medir el tiempo de cualquier sección en cualquier programa que quiera hacer; sólo aventaré el programa en un bloque y se lo pasaré a perfilar. ¿Qué podría ser más simple? En la mayoría de los lenguajes, tendría que añadir explícitamente el código para tomar el tiempo (las cosas en perfilar) alrededor de cada sección de código que quisiera analizar. En cambio, en Ruby puedo tenerlo todo en un solo lugar y (más importante) ¡fuera de mi camino!

Algunas cosas para intentar
El reloj del abuelo: Escribe un método que reciba un bloque y lo llame por cada hora que ha pasado el día de hoy. De esa forma, si yo le pasara el bloque do puts '¡DONG!' end, repicaría como un reloj de péndulo. Prueba tu método con unos cuantos bloques diferentes (incluyendo el que acabo de darte). Pista: Puedes usar Time.now.hour para obtener la hora actual. Pero esto devuelve un número entre 0 y 23, así que tienes que alterar esos números para obtener números comunes en la carátula de un reloj (del 1 a 12).

Registro de programas. Escribe un método llamado registro, que toma una cadena como descripción de un bloque y, por supuesto, un bloque, además de otra cadena al final, diciendo que ha terminado el bloque. De forma similar a algoImportante, debe poner una cadena diciendo que ha comenzado el bloque y otra cadena al final indicando que ha terminado el bloque, indicando lo que el bloque retornó. Prueba tu método enviándole un bloque de código. Dentro de ese bloque, coloca otra llamada a registro, pasando otro bloque. (Esto es llamado anidar.) En otras palabras, tu salida debe verse de forma similar a ésta:

Comenzando «bloque exterior»...
Comenzando «algún pequeño bloque»...
...«algún pequeño bloque» terminó, retornando: 5
Comenzando «un bloque más»...
...«un bloque más» terminó, retornando: ¡Me gusta la comida tailandesa!
...«bloque exterior» terminó, retornando: false

Un mejor registro de programas. La salida del último registro fue un poco difícil de leer y sería peor entre más métodos anidados recibiera. Sería mucho más fácil de leer si sangrara las líneas en los bloques internos. Para hacerlo, necesitarás llevar un registro de que tan profundamente anidado te encuentras cada vez que el registro quiera escribir algo. Para hacerlo, utiliza una variable global, una variable que puedes ver desde cualquier parte de tu código. Para crear una variable global, sólo precede el nombre de su variable con $, como éstas: $global, $profundidadDeAnidado y $chapulinColorado. Al final, tu registro debe presentar algo como esto:

Comenzando «bloque exterior»...
    Comenzando «algún pequeño bloque»...
        Comenzando «bloque pequeñito»...
        ...«bloque pequeñito» terminó, retornando: mucho amor
    ...«algún pequeño bloque» terminó, retornando: 42
    Comenzando «un bloque más»...
    ...«un bloque más» terminó, retornando: ¡Me gusta la comida hindú!
...«bloque exterior» terminó, retornando: false

Bueno, eso es todo lo que aprenderás en éste tutorial. ¡Felicidades! ¡Has aprendido muchísimo! Tal vez no sientes que puedes recordar todo, o te saltaste algunas partes... la verdad, está bien. La programación no es acerca de lo que sabes, es acerca de lo que puedes deducir. Mientras conozcas donde encontrar las cosas que olvidaste, lo harás bien. ¡Espero no creas que escribí todo esto sin buscar cosas a cada minuto! Porque lo hice. También recibí mucha ayuda con el código de los ejemplos en éste tutorial. Pero, ¿dónde estaba buscando cosas y dónde estaba yo pidiendo ayuda? Déjame mostrarte…

[27] También conocidas con el término en inglés closures.
[28] «bloque» en inglés.