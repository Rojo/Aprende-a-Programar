Un punto de partida para el futuro programador
Creo que todo esto comenzó tiempo atrás, en el 2002. Estaba pensando acerca de enseñar programación y que gran lenguaje sería Ruby para aprender como programar. Quiero decir, nos encontrábamos todo excitados acerca de Ruby porque era poderoso, elegante y, de verdad, simplemente divertido, pero me parecía que también sería una gran manera de adentrarse a la programación en primer lugar.

Desafortunadamente, no había mucha documentación orientada a principiantes en aquel entonces. En la comunidad, algunos de nosotros hablábamos sobre lo que un tutorial de "Ruby para el novato" necesitaría y, de forma más general, como enseñar a programar. Mientras más pensaba en eso, más tenía que decir al respecto (lo cual me sorprendió un poco). Finalmente alguien dijo, "Chris, ¿por qué no escribes un tutorial en lugar de hablar de eso?". Así que lo hice.

Y el resultado fue muy bueno. Tenía todas esas ideas que eran buenas en teoría, pero la tarea de hacer un gran tutorial para no-programadores tenía más reto de lo que había imaginado. (Quiero decir, parecía bueno para mí, pero yo ya sabía cómo programar).

Lo que me salvó fue que hice realmente fácil para las personas el contactarme y siempre traté de ayudarles cuando se encontraban dificultades. Cuando veía que muchas personas tenían problemas en algún lugar, lo reescribía. Fue mucho trabajo, pero poco a poco se volvió mejor y mejor.

Un par de años después, se estaba volviendo bastante bueno. :-) Muy bueno, de hecho, estaba listo para pronunciarlo terminado y moverme a algo más. Y justo en ese momento surgió la oportunidad de convertir el tutorial en un libro. Como prácticamente ya estaba hecho, se me figuro que no habría problema. Solo tendría que limpiar algunos puntos, añadir más ejercicios, tal vez algunos ejemplos más, unos cuantos capítulos más, pasarlo a 50 revisiones más...

Me tomó otro año, pero ahora creo que es realmente bueno, sobre todo debido a los cientos de valientes almas que me ayudaron a escribirlo.

Lo que está en este sitio es el tutorial original, más o menos sin cambios desde el 2004. Para leer la versión mejorada y más amplia, seguramente te gustaría revisar el libro.

Ideas para maestros
Hubo unos pocos principios a los que traté de adherirme. Creo que hicieron el proceso de aprendizaje mucho más fluido; aprender a programar ya es suficientemente difícil. Si estás enseñando o guiando a alguien sobre el camino hacia el reino del hacking, estas ideas podrían ayudarte también.

Primero, traté de separar los conceptos tanto como fuera posible, así el estudiante sólo tendrá que aprender un concepto a la vez. Esto fue difícil al principio, pero muy fácil cuando tomé un poco de práctica. Algunas cosas deben ser enseñadas antes que otras, pero me sorprendió cuán poca precedencia jerárquica realmente hay. Eventualmente sólo tuve que escoger un orden y arreglé las cosas de forma que cada nueva sección fuera motivada por las precedentes.

Otro principio que he mantenido en mente es enseñar sólo una forma de hacer algo. Es un beneficio obvio en un tutorial para personas que nunca han programado antes, por ésta razón: una manera de hacer las cosas es más fácil de aprender que dos. Tal vez un beneficio más importante, sin embargo, es que entre menos cosas le enseñes a un nuevo programador, más creativo y listo debe ser en sus soluciones. Como mucho de la programación es resolver problemas, es crucial promover esas habilidades tanto como sea posible en cada paso.

Trate de colocar nuevos conceptos de programación sobre los conceptos que un nuevo programador ya tiene; de presentar ideas de tal forma que su intuición llevará la carga más que el tutorial. La programación orientada a objetos se presta muy bien para esto. Fui capaz de comenzar a referirme a “objetos” y “diferentes tipos de objetos” muy temprano en el tutorial, deslizando esas palabras en el más inocente de los momentos. No decía cosas como "todo en Ruby es un objeto" o "números y cadenas de caracteres son objetos" porque estas frases no significan nada para un nuevo programador. En vez de eso, yo hablaría de cadenas de caracteres (no "objetos cadena"), y algunas veces me referiría a objetos simplemente diciendo "las cosas en esos programas". El hecho de que todas esas cosas en Ruby son objetos hizo que este tipo de estrategias de mi parte funcionará muy bien.

Aunque yo deseaba evitar el uso de jerga orientada a objetos innecesaria, quería estar seguro de que si ellos necesitaban aprender una palabra aprendieran la correcta. (No quiero que ellos tengan que aprender dos veces, ¿verdad?). Así que les llame "cadenas de caracteres" no "texto". Los métodos necesitan ser llamados de alguna forma así que los llame "métodos".

En cuanto a los ejercicios, creo que ideé unos muy buenos, pero nunca tienes demasiados. Honestamente, apostaría que gaste la mitad de mi tiempo tratando de formular ejercicios divertidos e interesantes. Ejercicios aburridos matarán absolutamente cualquier deseo de programar, mientras que el ejercicio perfecto crea esa comezón que el nuevo programador no puede más que rascar. Resumiendo, el tiempo gastado en formular buenos ejercicios no es demasiado.

Acerca del tutorial original
Las páginas de éste tutorial (aun ésta), son generadas por un programa en Ruby, claro. :-) Todos los códigos de ejemplo son automáticamente ejecutados y sus resultados son mostrados como han sido generados. Creo que es la mejor, más fácil y genial manera de asegurarme que todo el código que presento funciona exactamente como yo digo que lo hace. No tienes que preocuparte por el que yo haya copiado mal la salida de alguno de los ejemplos, o no haya probado algún código; todo ha sido probado.

Agradecimientos
Finalmente, quiero agradecer a todos en la lista de correo ruby-talk por sus comentarios y el ánimo que me dieron. A todos mi magníficos correctores que me ayudaron a hacer el libro mucho mejor de lo que pudiera haber hecho yo solo. A mi querida esposa especialmente por ser mi principal corrector-conejillo-de-indias-musa. A Matz por crear éste fabuloso lenguaje, y a los Programadores Pragmáticos por decirme acerca de él – ¡Y por supuesto por publicar mi libro! –.

Si notas algún error, tanto en un programa como en el texto, o tienes algún comentario o sugerencia o buenos ejercicios que pudiera incluir, por favor déjame saber.
